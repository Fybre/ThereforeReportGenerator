@page "/serverconfig"
@rendermode InteractiveServer
@using ThereforeReportGenerator.Models
@using ThereforeReportGenerator.Controllers
@using ThereforeReportGenerator.Context
@inject ReportDbContext db;


<PageTitle>Server Config</PageTitle>

<div class="container-fluid col-10 p-3">
    <h3>ServerConfig</h3>
    <div class="card">
        <div class="card-header"><h3>Mail Server</h3></div>

        <div class="card-body">
            <div class="form-group row p-1">
                <label for="mailserver" class="col-xs-4 col-sm-2 col-form-label">Mail Server</label>
                <div class="col-xs-8 col-sm-6">
                    <input id="mailserver" name="mailserver" placeholder="mail.server.com" type="text" class="form-control" @bind="mailConfig.MailServer">
                </div>
            </div>
            <div class="form-group row p-1">
                <label for="username" class="col-xs-4 col-sm-2 col-form-label">Username</label>
                <div class="col-xs-8 col-sm-6">
                    <input id="username" name="username" type="text" class="form-control" @bind="mailConfig.UserName" />
                </div>
            </div>
            <div class="form-group row p-1">
                <label for="password" class="col-xs-4 col-sm-2 col-form-label">Password</label>
                <div class="col-xs-8 col-sm-6">
                    <input id="password" name="password" type="password" class="form-control" @bind="@mailConfig.Password">
                </div>
            </div>
            <div class="form-group row p-1">
                <label for="from" class="col-xs-4 col-sm-2 col-form-label">From Address</label>
                <div class="col-xs-8 col-sm-6">
                    <input id="from" name="from" placeholder="reports@server.com" type="text" class="form-control" @bind="@mailConfig.From">
                </div>
            </div>
            <br />
            <div class="form-group row p-1">
                <div class="offset-4 col-8">
                    <span><button name="savemailserver" type="button" @onclick="submitMailConfig">Save</button>&nbsp;@status</span>
                </div>
            </div>

            <br />
            <div class="form-group row p-1">
                <div class="offset-sm-2 col-xs-8 col-sm-6">
                    <input id="testemail" type="email" @bind="testemail" class="form-control" />
                </div>
                <div class="offset-sm-4 col-4">
                    <span><button type="button" @onclick="@TestEmail">Test email</button> &nbsp;@emailstatus</span>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private SMTPMailConfig mailConfig = new SMTPMailConfig();
    private string status = "";
    private List<MailTemplate> templates;
    private string testemail = string.Empty;
    private string emailstatus = string.Empty;

    protected override void OnInitialized()
    {
        mailConfig = db.MailConfigs.OrderBy(x => x.Id).FirstOrDefault() ?? new SMTPMailConfig();
    }

    private async Task TestEmail()
    {
        IMailMessageDeliveryAgent mailDeliveryAgent = new SMPTMailMessageDeliveryAgent((SMTPMailConfig)mailConfig);
        System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage(mailConfig.From, 
                                            testemail, 
                                            "Test email from Therefore Report Generator", 
                                            $"This is a test message {DateTime.UtcNow.ToLocalTime().ToShortDateString()}");
        await mailDeliveryAgent.SendMessageAsync(msg);
        emailstatus = "Sent";

    }

    private async Task submitMailConfig()
    {
        status = "Saving...";
        if (db.MailConfigs.Count() > 0)
        {
            var oldConfig = db.MailConfigs.First();
            oldConfig.UserName = mailConfig.UserName;
            oldConfig.From = mailConfig.From;
            oldConfig.Password = mailConfig.Password;
            oldConfig.MailServer = mailConfig.MailServer;
            db.Update(oldConfig);
        }
        else
        {
            db.Add(mailConfig);
        }
        await db.SaveChangesAsync();
        status = "Saved";
        await Task.Delay(2000);
        status = "";
    }
}
